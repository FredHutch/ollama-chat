# Licensed under the MIT License
# https://github.com/craigahobbs/ollama-chat/blob/main/LICENSE

include <args.mds>
include <forms.mds>


# The Ollama Chat application main entry point
async function ollamaChatMain():
    args = argsParse(ollamaChatArguments)
    view = objectGet(args, 'view')

    # Render the chat page
    if view == 'chat':
        ollamaChatPage(args)
        return
    endif

    # Render the index page
    ollamaChatIndexPage(args)
endfunction


# The Ollama Chat application URL arguments
ollamaChatArguments = argsValidate(arrayNew( \
    objectNew('name', 'view'), \
    objectNew('name', 'id'), \
    objectNew('name', 'action', 'explicit', true), \
    objectNew('name', 'actionId', 'explicit', true) \
))


# The application title
ollamaChatTitle = 'Ollama Chat'


# The chat refresh period, in milliseconds
ollamaChatTimeoutMs = 500


# The Ollama Chat error page
function ollamaChatErrorPage(message):
    documentSetTitle(ollamaChatTitle)
    markdownPrint( \
        argsLink(ollamaChatArguments, 'Back', null, true), \
        '', \
        '# ' + ollamaChatTitle, \
        '', \
        '**ERROR:** ' + message \
    )
endfunction


# The Ollama Chat index page
async function ollamaChatIndexPage(args):
    action = objectGet(args, 'action')
    actionId = objectGet(args, 'actionId')

    # Render the title
    documentSetTitle(ollamaChatTitle)
    markdownPrint( \
        '# ' + ollamaChatTitle, \
        '' \
    )

    # Get the current model and the conversations list
    fetchURLs = arrayNew('getModel', 'getConversations')
    if action == 'select':
        arrayPush(fetchURLs, 'getModels')
    endif
    responses = systemFetch(fetchURLs)
    modelResponse = if(responses != null && arrayGet(responses, 0) != null, jsonParse(arrayGet(responses, 0)))
    conversationsResponse = if(responses != null && arrayGet(responses, 1) != null, jsonParse(arrayGet(responses, 1)))
    modelsResponse = if(responses != null && action == 'select' && arrayGet(responses, 2) != null, jsonParse(arrayGet(responses, 2)))
    if modelResponse == null || conversationsResponse == null || (action == 'select' && modelsResponse == null):
        ollamaChatErrorPage('Failed to load model and conversations')
        return
    endif

    # Render the model selection
    indent = stringFromCharCode(160, 160)
    markdownPrint('**Model:** ' + objectGet(modelResponse, 'model') + indent)
    if action == 'select':
        markdownPrint( \
            argsLink(ollamaChatArguments, 'Cancel', objectNew('action', null)), \
            '', \
            indent + indent + '**Select a model:**' \
        )
        for modelInfo in objectGet(modelsResponse, 'models'):
            model = objectGet(modelInfo, 'model')
            elementModelRender( \
                objectNew('html', 'p', 'elem', arrayNew( \
                    objectNew('text', indent + indent), \
                    formsLinkButtonElements(model, systemPartial(ollamaChatOnSelect, model)) \
                )) \
            )
        endfor
    else:
        # Render the start new chat link
        markdownPrint( \
            argsLink(ollamaChatArguments, 'Select', objectNew('action', 'select')), \
            '', \
            argsLink(ollamaChatArguments, 'Start New Conversation', objectNew('view', 'chat')) \
        )
    endif

    # Render the sample links
    conversations = objectGet(conversationsResponse, 'conversations')
    if arrayLength(conversations) != 0:
        markdownPrint('', '## Conversations')
        tableRows = arrayNew( \
            objectNew('html', 'tr', 'elem', arrayNew( \
                objectNew('html', 'th', 'elem', objectNew('text', 'Title')), \
                objectNew('html', 'th', 'elem', objectNew('text', 'Model')), \
                objectNew('html', 'th', 'elem', objectNew('text', 'Action')) \
            )) \
        )
        tableElements = objectNew('html', 'table', 'elem', tableRows)
        for conversation in conversations:
            conversationId = objectGet(conversation, 'id')
            conversationURL = argsURL(ollamaChatArguments, objectNew('view', 'chat', 'id', conversationId))
            isDeleting = action == 'delete' && actionId == conversationId
            deleteURL = argsURL(ollamaChatArguments, objectNew('action', 'delete', 'actionId', conversationId))
            arrayPush(tableRows, objectNew('html', 'tr', 'elem', arrayNew( \
                objectNew('html', 'td', 'elem', formsLinkElements(objectGet(conversation, 'title'), conversationURL)), \
                objectNew('html', 'td', 'elem', objectNew('text', objectGet(conversation, 'model'))), \
                objectNew('html', 'td', 'elem', if(isDeleting, null, formsLinkElements('Delete', deleteURL))) \
            )))
            if isDeleting:
                arrayPush(tableRows, objectNew('html', 'tr', 'elem', arrayNew( \
                    objectNew('html', 'td', 'attr', objectNew('colspan', '3'), 'elem', arrayNew( \
                        objectNew('text', indent + indent), \
                        objectNew('html', 'b', 'elem', objectNew('text', 'Delete?' + indent)), \
                        formsLinkButtonElements('Continue', systemPartial(ollamaChatOnDelete, conversationId)), \
                        objectNew('text', indent), \
                        formsLinkElements('Cancel', argsURL(ollamaChatArguments, null, true)) \
                    )) \
                )))
            endif
        endfor
        elementModelRender(tableElements)
    endif
endfunction


# Select model on-click event handler
async function ollamaChatOnSelect(model):
    # Set the model (ignore errors)
    systemFetch(objectNew('url', 'setModel', 'body', jsonStringify(objectNew('model', model))))

    # Set location to the index page
    windowSetLocation(argsURL(ollamaChatArguments, null, true))
endfunction


# Delete conversation on-click event handler
async function ollamaChatOnDelete(conversationId):
    # Set the model (ignore errors)
    systemFetch(objectNew('url', 'deleteConversation', 'body', jsonStringify(objectNew('id', conversationId))))

    # Set location to the index page
    windowSetLocation(argsURL(ollamaChatArguments, null, true))
endfunction


# The Ollama Chat chat page
async function ollamaChatPage(args):
    id = objectGet(args, 'id')

    # Fetch the conversation
    title = ollamaChatTitle
    if id != null:
        conversationResponse = systemFetch('getConversation?id=' + id)
        conversationResponse = if(conversationResponse != null, jsonParse(conversationResponse))
        if conversationResponse == null:
            ollamaChatErrorPage('Unknown conversation ID')
            return
        endif
        conversation = objectGet(conversationResponse, 'conversation')
        generating = objectGet(conversationResponse, 'generating')
        title = objectGet(conversation, 'title')
        model = objectGet(conversation, 'model')
    else:
        modelResponse = systemFetch('getModel')
        modelResponse = if(modelResponse != null, jsonParse(modelResponse))
        if modelResponse == null:
            ollamaChatErrorPage('Failed to get current model')
            return
        endif
        model = objectGet(modelResponse, 'model')
    endif

    # Render the chat title
    documentSetTitle(title)
    markdownPrint( \
        argsLink(ollamaChatArguments, 'Back', null, true), \
        '', \
        '# ' + title, \
        '', \
        '**Model:** ' + markdownEscape(model), \
        '' \
    )

    # Generating?
    if !generating:
        # Render the prompt input
        elementModelRender(arrayNew( \
            objectNew('html', 'p', 'elem', formsTextElements('ollama-chat-prompt', '', 50, systemPartial(ollamaChatOnPrompt, id))), \
            objectNew('html', 'p', 'elem', formsLinkButtonElements('Submit', systemPartial(ollamaChatOnPrompt, id))) \
        ))
        documentSetFocus('ollama-chat-prompt')
    else:
        elementModelRender( \
            objectNew('html', 'p', 'elem', arrayNew( \
                objectNew('text', 'Generating... '), \
                formsLinkButtonElements('Stop', systemPartial(ollamaChatOnConversation, id, 'stopConversation')) \
            )) \
        )
    endif

    # Render the exchanges
    exchanges = objectGet(conversation, 'exchanges')
    if conversation != null:
        for exchange in exchanges:
            markdownPrint( \
                '', \
                '## User:', \
                '', \
                objectGet(exchange, 'user'), \
                '', \
                '## ' + markdownEscape(objectGet(conversation, 'model')) + ':', \
                '', \
                objectGet(exchange, 'model') \
            )
        endfor
    endif

    # Regenerate and delete links
    if !generating:
        indent = stringFromCharCode(160, 160)
        elementModelRender( \
            objectNew('html', 'p', 'elem', arrayNew( \
                if(arrayLength(exchanges) > 1, arrayNew( \
                    formsLinkButtonElements('Delete', systemPartial(ollamaChatOnConversation, id, 'deleteConversationExchange')), \
                    objectNew('text', indent) \
                )), \
                formsLinkButtonElements('Regenerate', systemPartial(ollamaChatOnConversation, id, 'regenerateConversationExchange')) \
            )) \
        )
    endif

    # Set the chat timeout
    if generating:
        windowSetTimeout(ollamaChatMain, ollamaChatTimeoutMs)
    endif
endfunction


# Conversation action on-click event handler
async function ollamaChatOnConversation(id, url):
    # Perform the conversation acgtion
    actionRequest = jsonStringify(objectNew('id', id))
    systemFetch(objectNew('url', url, 'body', actionRequest))

    # Render the page
    ollamaChatMain()
endfunction


# Prompt on-enter/on-click event handler
async function ollamaChatOnPrompt(id):
    # Get the prompt text
    prompt = stringTrim(documentInputValue('ollama-chat-prompt'))
    if prompt == '':
        return
    endif

    # Starting a chat?
    if id == null:
        # Start the chat
        startRequest = jsonStringify(objectNew('user', prompt))
        startResponse = systemFetch(objectNew('url', 'startConversation', 'body', startRequest))
        startResponse = if(startResponse != null, jsonParse(startResponse))
        if startResponse == null:
            return
        endif
        id = objectGet(startResponse, 'id')

        # Navigate to the conversation ID
        windowSetLocation(argsURL(ollamaChatArguments, objectNew('id', id)))
        return
    endif

    # Reply to that chat
    replyRequest = jsonStringify(objectNew('id', id, 'user', prompt))
    replyResponse = systemFetch(objectNew('url', 'replyConversation', 'body', replyRequest))
    replyResponse = if(replyResponse != null, jsonParse(replyResponse))
    if replyResponse == null:
        return
    endif

    # Set the chat timeout
    windowSetTimeout(ollamaChatMain, ollamaChatTimeoutMs)
endfunction
